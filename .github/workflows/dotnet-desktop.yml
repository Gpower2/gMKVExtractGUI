# GitHub Workflow for building and testing a .NET Framework WinForms application
# This workflow is triggered on pushes and pull requests to the 'main' branch.

name: .NET Framework CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # Use a modern Windows runner. 'windows-latest' will point to the newest stable Windows environment (e.g., windows-2022).
    runs-on: windows-latest

    # Environment variables to easily manage your project names
    env:
      SOLUTION_FILE_PATH: gMKVExtractGUI.sln
      TEST_ASSEMBLY_PATTERN: '*gMKVToolnix.Unit.Tests.dll'

    steps:
    # Checks out a copy of your repository on the runner.
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Sets up the NuGet CLI. This is still needed for the nuget command.
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'

    # UPDATED: This step installs dependencies and then saves the build environment for subsequent steps.
    - name: Setup Build Environment
      run: |
        echo "Starting installation of .NET 4.0 Targeting Packs..."
        $vsInstaller = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe"
        $vsPath = vswhere -latest -property installationPath
        # Use -passive instead of -quiet to show progress and prevent timeouts
        $argumentList = "modify --installPath ""$vsPath"" --add Microsoft.VisualStudio.Component.Framework40.TargetingPack --add Microsoft.VisualStudio.Component.NetFx4-TargetingPack --passive --norestart"
        $process = Start-Process -FilePath $vsInstaller -ArgumentList $argumentList -Wait -PassThru
        if ($process.ExitCode -ne 0) {
          Write-Error "VS Installer failed with exit code $($process.ExitCode)."
          exit $process.ExitCode
        }
        
        echo "Installation complete. Configuring and saving build environment..."
        # Get the environment variables from the Developer Command Prompt and save them to the GITHUB_ENV file
        $devCmdPath = Join-Path $vsPath "Common7\Tools\VsDevCmd.bat"
        cmd.exe /c "`"$devCmdPath`" -arch=x86 && set" | ForEach-Object {
          if ($_ -match "=") {
            $key, $value = $_.Split("=", 2)
            "$key=$value" >> $env:GITHUB_ENV
          }
        }
      shell: powershell

    - name: Restore NuGet Packages
      run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

    - name: Build solution
      run: msbuild ${{ env.SOLUTION_FILE_PATH }} /p:Configuration=Release /p:TargetFrameworkVersion=v4.0

    - name: Run unit tests
      run: |
        $vstestPath = vswhere -latest -requires Microsoft.VisualStudio.PackageGroup.TestTools.Core -find **\vstest.console.exe | Select-Object -First 1
        if (-not $vstestPath) {
          Write-Error "vstest.console.exe not found."
          exit 1
        }
        & $vstestPath (Get-ChildItem -Recurse -Filter ${{ env.TEST_ASSEMBLY_PATTERN }} | Where-Object { $_.Name -notlike "*obj*" } | Select-Object -ExpandProperty FullName) /Logger:trx
      shell: powershell

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
