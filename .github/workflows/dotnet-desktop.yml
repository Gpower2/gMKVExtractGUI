# GitHub Workflow for building and testing a .NET Framework WinForms application
# This workflow is triggered on pushes and pull requests to the 'main' branch.

name: .NET Framework CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # Use a modern Windows runner.
    runs-on: windows-latest

    env:
      SOLUTION_FILE_PATH: gMKVExtractGUI.sln
      TEST_ASSEMBLY_PATTERN: '*gMKVToolnix.Unit.Tests.dll'
      # Define the expected path for the reference assemblies
      FRAMEWORK_REFERENCE_ASSEMBLIES_PATH: "C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0"

    steps:
    # Checks out a copy of your repository on the runner.
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET 4.0 Targeting Pack using the VS Installer.
    # UPDATED: Corrected the script to properly pass the VS path to the installer.
    - name: Install .NET 4.0 Targeting Pack
      run: |
        $vsInstaller = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe"
        $componentID = "Microsoft.VisualStudio.Component.Framework40.TargetingPack"
        
        # First, execute vswhere and store its output in a variable
        $vsPath = vswhere -latest -property installationPath
        
        Write-Host "Adding component '$componentID' to VS installation at '$vsPath'..."
        
        # Then, build the argument list using the variable
        $argumentList = "modify --installPath ""$vsPath"" --add $componentID --quiet --norestart"
        
        # Execute the installer with the correctly formatted arguments
        $process = Start-Process -FilePath $vsInstaller -ArgumentList $argumentList -Wait -PassThru
        
        if ($process.ExitCode -ne 0) {
          Write-Error "VS Installer failed with exit code $($process.ExitCode). Arguments used: $argumentList"
          exit $process.ExitCode
        }
        Write-Host ".NET 4.0 Targeting Pack installed successfully."
      shell: powershell

    # Add a diagnostic step to verify the installation of reference assemblies.
    - name: Verify Reference Assembly Installation
      run: |
        if (Test-Path "${{ env.FRAMEWORK_REFERENCE_ASSEMBLIES_PATH }}") {
          Write-Host "Reference assemblies found at ${{ env.FRAMEWORK_REFERENCE_ASSEMBLIES_PATH }}. Listing contents:"
          Get-ChildItem -Path "${{ env.FRAMEWORK_REFERENCE_ASSEMBLIES_PATH }}"
        } else {
          Write-Error "Reference assemblies directory NOT FOUND at ${{ env.FRAMEWORK_REFERENCE_ASSEMBLIES_PATH }}"
          exit 1
        }
      shell: powershell

    # Sets up MSBuild in the environment.
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    # Sets up the NuGet CLI for restoring packages.
    - name: Setup NuGet
      uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'

    # Restores the NuGet packages for your solution.
    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

    # Builds the solution.
    # Explicitly overrides the framework path for MSBuild to ensure it finds the assemblies.
    - name: Build solution
      run: >
        msbuild ${{ env.SOLUTION_FILE_PATH }} 
        /p:Configuration=Release 
        /p:TargetFrameworkVersion=v4.0 
        /p:FrameworkPathOverride="${{ env.FRAMEWORK_REFERENCE_ASSEMBLIES_PATH }}"

    # Runs the unit tests for your project.
    - name: Run unit tests
      run: |
        $vstestPath = vswhere -latest -requires Microsoft.VisualStudio.PackageGroup.TestTools.Core -find **\vstest.console.exe | Select-Object -First 1
        if (-not $vstestPath) {
          Write-Error "vstest.console.exe not found."
          exit 1
        }
        & $vstestPath (Get-ChildItem -Recurse -Filter ${{ env.TEST_ASSEMBLY_PATTERN }} | Where-Object { $_.Name -notlike "*obj*" } | Select-Object -ExpandProperty FullName) /Logger:trx
      shell: powershell

    # Publishes the test results.
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx
